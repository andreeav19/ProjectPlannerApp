// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using taskarescu.Server.Db;

#nullable disable

namespace taskarescu.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240116024944_seedPanaNuMaiPot")]
    partial class seedPanaNuMaiPot
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("taskarescu.Server.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "acbda893-a8e4-45f2-b3f9-2a0068b29f57",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "311c9a88-fe29-4b7c-a8bb-43aef2f3013c",
                            Name = "Prof",
                            NormalizedName = "PROF"
                        },
                        new
                        {
                            Id = "6d0fea85-946f-453a-9897-863f79b652cb",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("taskarescu.Server.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bbfcea33-5568-4558-b6c0-9353518b9261",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fc9939d9-a392-4eeb-be45-54b22143edce",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEEcY5SjyngP3QjfCH6oOe0dIEp658axYsFgMaBoJWNXE+nvA6gSzdykevB9SXZp/ww==",
                            PhoneNumberConfirmed = false,
                            RoleId = "acbda893-a8e4-45f2-b3f9-2a0068b29f57",
                            SecurityStamp = "275ec1a0-09b6-41f0-828c-b072c0c52114",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "4b8914a7-6a92-4dce-ae6c-ee2fdac743d3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65e2dfa2-f709-40c3-8f90-74c229a845ed",
                            Email = "lisa.miller@student.com",
                            EmailConfirmed = true,
                            FirstName = "Lisa",
                            LastName = "Miller",
                            LockoutEnabled = false,
                            NormalizedEmail = "LISA.MILLER@STUDENT.COM",
                            NormalizedUserName = "LISAMILLER",
                            PasswordHash = "AQAAAAIAAYagAAAAEDpp5K9sIcvwVCsSGIl4sTL4qb/E9qies7+Ah+HBxX4wMDmyuOdGOH0cCoteNqWdpA==",
                            PhoneNumberConfirmed = false,
                            RoleId = "6d0fea85-946f-453a-9897-863f79b652cb",
                            SecurityStamp = "550af599-29c0-4a42-8946-273ab4d14a59",
                            TwoFactorEnabled = false,
                            UserName = "lisamiller"
                        },
                        new
                        {
                            Id = "590201ab-1c71-4d80-8da8-78be2bd3df9a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4b33c401-2b8c-4f88-8460-679c0978ae95",
                            Email = "alex.wong@student.com",
                            EmailConfirmed = true,
                            FirstName = "Alex",
                            LastName = "Wong",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEX.WONG@STUDENT.COM",
                            NormalizedUserName = "ALEXWONG",
                            PasswordHash = "AQAAAAIAAYagAAAAEIu2NVpdx+4tMspFXPbmPapRXg84c5e4aJNOW8+hV+MyjOsnuh2I/St+HayIer5CHg==",
                            PhoneNumberConfirmed = false,
                            RoleId = "6d0fea85-946f-453a-9897-863f79b652cb",
                            SecurityStamp = "c1f84cf0-0c4d-4a7f-b120-4c0dfe8d9006",
                            TwoFactorEnabled = false,
                            UserName = "alexwong"
                        },
                        new
                        {
                            Id = "3b11ba9f-2b09-4b1a-b784-87e0040a2f56",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "051ccf30-7b18-4abb-ad7d-e2a2ce2bf33a",
                            Email = "sam.jones@student.com",
                            EmailConfirmed = true,
                            FirstName = "Sam",
                            LastName = "Jones",
                            LockoutEnabled = false,
                            NormalizedEmail = "SAM.JONES@STUDENT.COM",
                            NormalizedUserName = "SAMJONES",
                            PasswordHash = "AQAAAAIAAYagAAAAELWfmcYrr5O5zMmIcZEuQc/tZ9O2Oyxy2qd3Q1ghmY5CavbDMNY5Afu3v3ObvB6kAg==",
                            PhoneNumberConfirmed = false,
                            RoleId = "6d0fea85-946f-453a-9897-863f79b652cb",
                            SecurityStamp = "6e2ccc22-afdb-41e1-8ef7-07ee61d4e270",
                            TwoFactorEnabled = false,
                            UserName = "samjones"
                        },
                        new
                        {
                            Id = "b3a5b520-36c2-40dd-9c3a-6223a71f7f7f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6e1b7f8d-8c8d-41b6-9fa3-a3fe168ca3e2",
                            Email = "emily.jones@professor.com",
                            EmailConfirmed = true,
                            FirstName = "Emily",
                            LastName = "Jones",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILY.JONES@PROFESSOR.COM",
                            NormalizedUserName = "EMILYJONES",
                            PasswordHash = "AQAAAAIAAYagAAAAEPG1+eJJopWcIjnVgCjFWpccxqoc7Fy0K8IQ04a2HNZSGAw5O9IretlEjUutWxxZ7Q==",
                            PhoneNumberConfirmed = false,
                            RoleId = "311c9a88-fe29-4b7c-a8bb-43aef2f3013c",
                            SecurityStamp = "ab97223b-40ef-410a-84e6-5c21b9ec23a3",
                            TwoFactorEnabled = false,
                            UserName = "emilyjones"
                        },
                        new
                        {
                            Id = "f2517e43-07ae-4c0f-8f63-e2481b47a5c7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b0c1a2d6-4fa9-4daa-af74-a83a13c22263",
                            Email = "daniel.white@professor.com",
                            EmailConfirmed = true,
                            FirstName = "Daniel",
                            LastName = "White",
                            LockoutEnabled = false,
                            NormalizedEmail = "DANIEL.WHITE@PROFESSOR.COM",
                            NormalizedUserName = "DANIELWHITE",
                            PasswordHash = "AQAAAAIAAYagAAAAEOkGKViacqxMcB53cL1AwEzhnoXYGzT/G5JOwuDzR/i75j9LM8bOwpaOfGsqiXsM+w==",
                            PhoneNumberConfirmed = false,
                            RoleId = "311c9a88-fe29-4b7c-a8bb-43aef2f3013c",
                            SecurityStamp = "36e35e19-6c6b-4880-b639-caca460b67aa",
                            TwoFactorEnabled = false,
                            UserName = "danielwhite"
                        });
                });

            modelBuilder.Entity("taskarescu.Server.Models.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Badges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Awarded to users who excel in project planning.",
                            Name = "Project Planner"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Awarded to users who consistently complete tasks on time.",
                            Name = "Task Master"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Awarded to users who demonstrate excellent teamwork skills.",
                            Name = "Team Player"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Awarded to users who propose innovative solutions to project challenges.",
                            Name = "Innovator"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Awarded to users who effectively solve complex problems within a project.",
                            Name = "Problem Solver"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Awarded to users who excel in project communication and collaboration.",
                            Name = "Communication Pro"
                        });
                });

            modelBuilder.Entity("taskarescu.Server.Models.Difficulty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Difficulties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Easy"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Moderate"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Intermediate"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Challenging"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Advanced"
                        });
                });

            modelBuilder.Entity("taskarescu.Server.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("TaskItemId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("TaskItemId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Feedback pentru implementarea funcționalității X.",
                            DifficultyId = 2,
                            Points = 8,
                            TaskItemId = 1,
                            UserId = "4b8914a7-6a92-4dce-ae6c-ee2fdac743d3"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Feedback pentru testarea modulului Y.",
                            DifficultyId = 3,
                            Points = 9,
                            TaskItemId = 2,
                            UserId = "590201ab-1c71-4d80-8da8-78be2bd3df9a"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Feedback pentru documentarea proiectului.",
                            DifficultyId = 1,
                            Points = 7,
                            TaskItemId = 3,
                            UserId = "3b11ba9f-2b09-4b1a-b784-87e0040a2f56"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Feedback pentru soluționarea bug-urilor.",
                            DifficultyId = 2,
                            Points = 6,
                            TaskItemId = 4,
                            UserId = "4b8914a7-6a92-4dce-ae6c-ee2fdac743d3"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Feedback pentru optimizarea performanței.",
                            DifficultyId = 3,
                            Points = 9,
                            TaskItemId = 5,
                            UserId = "590201ab-1c71-4d80-8da8-78be2bd3df9a"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Feedback pentru implementarea interfeței utilizator.",
                            DifficultyId = 2,
                            Points = 8,
                            TaskItemId = 6,
                            UserId = "3b11ba9f-2b09-4b1a-b784-87e0040a2f56"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Feedback pentru testarea integrării modulelor.",
                            DifficultyId = 1,
                            Points = 7,
                            TaskItemId = 7,
                            UserId = "4b8914a7-6a92-4dce-ae6c-ee2fdac743d3"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Feedback pentru analiza cerințelor.",
                            DifficultyId = 2,
                            Points = 8,
                            TaskItemId = 8,
                            UserId = "590201ab-1c71-4d80-8da8-78be2bd3df9a"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Feedback pentru optimizarea bazei de date.",
                            DifficultyId = 3,
                            Points = 9,
                            TaskItemId = 9,
                            UserId = "3b11ba9f-2b09-4b1a-b784-87e0040a2f56"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Feedback pentru raportul de progres săptămânal.",
                            DifficultyId = 1,
                            Points = 7,
                            TaskItemId = 10,
                            UserId = "4b8914a7-6a92-4dce-ae6c-ee2fdac743d3"
                        });
                });

            modelBuilder.Entity("taskarescu.Server.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a6b66ec7-ae2a-4c7a-a1e7-4a0c1b4f4770"),
                            Description = "Proiect legat de optimizarea și gestionarea bazelor de date avansate.",
                            Name = "Baze de Date Avansate",
                            UserId = "bbfcea33-5568-4558-b6c0-9353518b9261"
                        },
                        new
                        {
                            Id = new Guid("c6511c7b-2970-46e1-b9f5-538a7c091cfe"),
                            Description = "Implementarea unei rețele de calculatoare eficiente.",
                            Name = "Rețele de Calculatoare",
                            UserId = "b3a5b520-36c2-40dd-9c3a-6223a71f7f7f"
                        },
                        new
                        {
                            Id = new Guid("7f297b67-4d4d-4e70-89a8-7e49b0b6b51e"),
                            Description = "Proiect în domeniul inteligenței artificiale și învățare automată.",
                            Name = "Inteligenta Artificiala",
                            UserId = "b3a5b520-36c2-40dd-9c3a-6223a71f7f7f"
                        });
                });

            modelBuilder.Entity("taskarescu.Server.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "To Do"
                        },
                        new
                        {
                            Id = 2,
                            Name = "In Progress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Done"
                        });
                });

            modelBuilder.Entity("taskarescu.Server.Models.StudentProject", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("StudentProjects");

                    b.HasData(
                        new
                        {
                            UserId = "4b8914a7-6a92-4dce-ae6c-ee2fdac743d3",
                            ProjectId = new Guid("a6b66ec7-ae2a-4c7a-a1e7-4a0c1b4f4770")
                        },
                        new
                        {
                            UserId = "590201ab-1c71-4d80-8da8-78be2bd3df9a",
                            ProjectId = new Guid("a6b66ec7-ae2a-4c7a-a1e7-4a0c1b4f4770")
                        },
                        new
                        {
                            UserId = "3b11ba9f-2b09-4b1a-b784-87e0040a2f56",
                            ProjectId = new Guid("a6b66ec7-ae2a-4c7a-a1e7-4a0c1b4f4770")
                        },
                        new
                        {
                            UserId = "590201ab-1c71-4d80-8da8-78be2bd3df9a",
                            ProjectId = new Guid("7f297b67-4d4d-4e70-89a8-7e49b0b6b51e")
                        },
                        new
                        {
                            UserId = "3b11ba9f-2b09-4b1a-b784-87e0040a2f56",
                            ProjectId = new Guid("7f297b67-4d4d-4e70-89a8-7e49b0b6b51e")
                        },
                        new
                        {
                            UserId = "3b11ba9f-2b09-4b1a-b784-87e0040a2f56",
                            ProjectId = new Guid("c6511c7b-2970-46e1-b9f5-538a7c091cfe")
                        },
                        new
                        {
                            UserId = "590201ab-1c71-4d80-8da8-78be2bd3df9a",
                            ProjectId = new Guid("c6511c7b-2970-46e1-b9f5-538a7c091cfe")
                        });
                });

            modelBuilder.Entity("taskarescu.Server.Models.TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deadline = new DateTime(2024, 1, 23, 4, 49, 43, 815, DateTimeKind.Local).AddTicks(5283),
                            Description = "Implementare funcționalitate X în cadrul proiectului Y.",
                            Name = "Implementare funcționalitate X",
                            ProjectId = new Guid("a6b66ec7-ae2a-4c7a-a1e7-4a0c1b4f4770"),
                            StatusId = 1,
                            UserId = "4b8914a7-6a92-4dce-ae6c-ee2fdac743d3"
                        },
                        new
                        {
                            Id = 2,
                            Deadline = new DateTime(2024, 1, 26, 4, 49, 43, 815, DateTimeKind.Local).AddTicks(5372),
                            Description = "Testare modul Y în cadrul proiectului Z.",
                            Name = "Testare modul Y",
                            ProjectId = new Guid("c6511c7b-2970-46e1-b9f5-538a7c091cfe"),
                            StatusId = 1,
                            UserId = "590201ab-1c71-4d80-8da8-78be2bd3df9a"
                        },
                        new
                        {
                            Id = 3,
                            Deadline = new DateTime(2024, 1, 21, 4, 49, 43, 815, DateTimeKind.Local).AddTicks(5376),
                            Description = "Documentare proiect pentru prezentare finală.",
                            Name = "Documentare proiect",
                            ProjectId = new Guid("7f297b67-4d4d-4e70-89a8-7e49b0b6b51e"),
                            StatusId = 1,
                            UserId = "3b11ba9f-2b09-4b1a-b784-87e0040a2f56"
                        },
                        new
                        {
                            Id = 4,
                            Deadline = new DateTime(2024, 1, 19, 4, 49, 43, 815, DateTimeKind.Local).AddTicks(5380),
                            Description = "Soluționare bug-uri identificate în ultima versiune a proiectului.",
                            Name = "Soluționare bug-uri",
                            ProjectId = new Guid("a6b66ec7-ae2a-4c7a-a1e7-4a0c1b4f4770"),
                            StatusId = 1,
                            UserId = "4b8914a7-6a92-4dce-ae6c-ee2fdac743d3"
                        },
                        new
                        {
                            Id = 5,
                            Deadline = new DateTime(2024, 1, 24, 4, 49, 43, 815, DateTimeKind.Local).AddTicks(5383),
                            Description = "Optimizare performanță în cadrul aplicației.",
                            Name = "Optimizare performanță",
                            ProjectId = new Guid("c6511c7b-2970-46e1-b9f5-538a7c091cfe"),
                            StatusId = 1,
                            UserId = "590201ab-1c71-4d80-8da8-78be2bd3df9a"
                        },
                        new
                        {
                            Id = 6,
                            Deadline = new DateTime(2024, 1, 22, 4, 49, 43, 815, DateTimeKind.Local).AddTicks(5391),
                            Description = "Implementare interfață utilizator pentru secțiunea X a proiectului.",
                            Name = "Implementare interfață utilizator",
                            ProjectId = new Guid("7f297b67-4d4d-4e70-89a8-7e49b0b6b51e"),
                            StatusId = 1,
                            UserId = "3b11ba9f-2b09-4b1a-b784-87e0040a2f56"
                        },
                        new
                        {
                            Id = 7,
                            Deadline = new DateTime(2024, 1, 25, 4, 49, 43, 815, DateTimeKind.Local).AddTicks(5405),
                            Description = "Testare integrare a modulelor proiectului principal.",
                            Name = "Testare integrare",
                            ProjectId = new Guid("a6b66ec7-ae2a-4c7a-a1e7-4a0c1b4f4770"),
                            StatusId = 1,
                            UserId = "4b8914a7-6a92-4dce-ae6c-ee2fdac743d3"
                        },
                        new
                        {
                            Id = 8,
                            Deadline = new DateTime(2024, 1, 20, 4, 49, 43, 815, DateTimeKind.Local).AddTicks(5409),
                            Description = "Analiză cerințe pentru viitoarele iterații ale proiectului.",
                            Name = "Analiză cerințe",
                            ProjectId = new Guid("c6511c7b-2970-46e1-b9f5-538a7c091cfe"),
                            StatusId = 1,
                            UserId = "590201ab-1c71-4d80-8da8-78be2bd3df9a"
                        },
                        new
                        {
                            Id = 9,
                            Deadline = new DateTime(2024, 1, 23, 4, 49, 43, 815, DateTimeKind.Local).AddTicks(5417),
                            Description = "Optimizare performanță și structură în baza de date a proiectului.",
                            Name = "Optimizare bază de date",
                            ProjectId = new Guid("7f297b67-4d4d-4e70-89a8-7e49b0b6b51e"),
                            StatusId = 1,
                            UserId = "3b11ba9f-2b09-4b1a-b784-87e0040a2f56"
                        },
                        new
                        {
                            Id = 10,
                            Deadline = new DateTime(2024, 1, 21, 4, 49, 43, 815, DateTimeKind.Local).AddTicks(5420),
                            Description = "Generare raport de progres pentru săptămâna curentă.",
                            Name = "Raport progres săptămânal",
                            ProjectId = new Guid("a6b66ec7-ae2a-4c7a-a1e7-4a0c1b4f4770"),
                            StatusId = 1,
                            UserId = "4b8914a7-6a92-4dce-ae6c-ee2fdac743d3"
                        },
                        new
                        {
                            Id = 11,
                            Deadline = new DateTime(2024, 1, 28, 4, 49, 43, 815, DateTimeKind.Local).AddTicks(5427),
                            Description = "Integrare servicii terțe în cadrul proiectului.",
                            Name = "Integrare servicii terțe",
                            ProjectId = new Guid("c6511c7b-2970-46e1-b9f5-538a7c091cfe"),
                            StatusId = 1,
                            UserId = "590201ab-1c71-4d80-8da8-78be2bd3df9a"
                        },
                        new
                        {
                            Id = 12,
                            Deadline = new DateTime(2024, 1, 24, 4, 49, 43, 815, DateTimeKind.Local).AddTicks(5431),
                            Description = "Documentare API pentru a fi folosit de dezvoltatori terți.",
                            Name = "Documentare API",
                            ProjectId = new Guid("7f297b67-4d4d-4e70-89a8-7e49b0b6b51e"),
                            StatusId = 1,
                            UserId = "3b11ba9f-2b09-4b1a-b784-87e0040a2f56"
                        },
                        new
                        {
                            Id = 13,
                            Deadline = new DateTime(2024, 1, 22, 4, 49, 43, 815, DateTimeKind.Local).AddTicks(5435),
                            Description = "Optimizare algoritmi utilizați în cadrul proiectului principal.",
                            Name = "Optimizare algoritmi",
                            ProjectId = new Guid("a6b66ec7-ae2a-4c7a-a1e7-4a0c1b4f4770"),
                            StatusId = 1,
                            UserId = "4b8914a7-6a92-4dce-ae6c-ee2fdac743d3"
                        },
                        new
                        {
                            Id = 14,
                            Deadline = new DateTime(2024, 1, 27, 4, 49, 43, 815, DateTimeKind.Local).AddTicks(5439),
                            Description = "Implementare testare automată pentru modulele cheie ale proiectului.",
                            Name = "Implementare testare automată",
                            ProjectId = new Guid("c6511c7b-2970-46e1-b9f5-538a7c091cfe"),
                            StatusId = 1,
                            UserId = "590201ab-1c71-4d80-8da8-78be2bd3df9a"
                        },
                        new
                        {
                            Id = 15,
                            Deadline = new DateTime(2024, 1, 25, 4, 49, 43, 815, DateTimeKind.Local).AddTicks(5443),
                            Description = "Configurare servere pentru lansarea în producție a proiectului.",
                            Name = "Configurare servere de producție",
                            ProjectId = new Guid("7f297b67-4d4d-4e70-89a8-7e49b0b6b51e"),
                            StatusId = 1,
                            UserId = "3b11ba9f-2b09-4b1a-b784-87e0040a2f56"
                        },
                        new
                        {
                            Id = 16,
                            Deadline = new DateTime(2024, 1, 23, 4, 49, 43, 815, DateTimeKind.Local).AddTicks(5466),
                            Description = "Soluționare probleme identificate de auditul de securitate.",
                            Name = "Soluționare probleme de securitate",
                            ProjectId = new Guid("a6b66ec7-ae2a-4c7a-a1e7-4a0c1b4f4770"),
                            StatusId = 1,
                            UserId = "4b8914a7-6a92-4dce-ae6c-ee2fdac743d3"
                        },
                        new
                        {
                            Id = 17,
                            Deadline = new DateTime(2024, 1, 30, 4, 49, 43, 815, DateTimeKind.Local).AddTicks(5470),
                            Description = "Creare instrumente de analiză pentru datele generate de proiect.",
                            Name = "Creare instrumente de analiză",
                            ProjectId = new Guid("c6511c7b-2970-46e1-b9f5-538a7c091cfe"),
                            StatusId = 1,
                            UserId = "590201ab-1c71-4d80-8da8-78be2bd3df9a"
                        },
                        new
                        {
                            Id = 18,
                            Deadline = new DateTime(2024, 1, 22, 4, 49, 43, 815, DateTimeKind.Local).AddTicks(5473),
                            Description = "Integrare cu o platformă externă pentru funcționalitate adițională.",
                            Name = "Integrare cu platformă externă",
                            ProjectId = new Guid("7f297b67-4d4d-4e70-89a8-7e49b0b6b51e"),
                            StatusId = 1,
                            UserId = "3b11ba9f-2b09-4b1a-b784-87e0040a2f56"
                        },
                        new
                        {
                            Id = 19,
                            Deadline = new DateTime(2024, 1, 24, 4, 49, 43, 815, DateTimeKind.Local).AddTicks(5481),
                            Description = "Testare de securitate pentru identificarea vulnerabilităților.",
                            Name = "Testare securitate",
                            ProjectId = new Guid("a6b66ec7-ae2a-4c7a-a1e7-4a0c1b4f4770"),
                            StatusId = 1,
                            UserId = "4b8914a7-6a92-4dce-ae6c-ee2fdac743d3"
                        },
                        new
                        {
                            Id = 20,
                            Deadline = new DateTime(2024, 1, 23, 4, 49, 43, 815, DateTimeKind.Local).AddTicks(5493),
                            Description = "Refactorizare cod pentru îmbunătățirea structurii și performanței.",
                            Name = "Refactorizare cod",
                            ProjectId = new Guid("c6511c7b-2970-46e1-b9f5-538a7c091cfe"),
                            StatusId = 1,
                            UserId = "590201ab-1c71-4d80-8da8-78be2bd3df9a"
                        });
                });

            modelBuilder.Entity("taskarescu.Server.Models.UserBadge", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BadgeId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "BadgeId");

                    b.HasIndex("BadgeId");

                    b.ToTable("UserBadges");

                    b.HasData(
                        new
                        {
                            UserId = "4b8914a7-6a92-4dce-ae6c-ee2fdac743d3",
                            BadgeId = 1
                        },
                        new
                        {
                            UserId = "590201ab-1c71-4d80-8da8-78be2bd3df9a",
                            BadgeId = 2
                        },
                        new
                        {
                            UserId = "3b11ba9f-2b09-4b1a-b784-87e0040a2f56",
                            BadgeId = 3
                        },
                        new
                        {
                            UserId = "4b8914a7-6a92-4dce-ae6c-ee2fdac743d3",
                            BadgeId = 4
                        },
                        new
                        {
                            UserId = "590201ab-1c71-4d80-8da8-78be2bd3df9a",
                            BadgeId = 5
                        },
                        new
                        {
                            UserId = "3b11ba9f-2b09-4b1a-b784-87e0040a2f56",
                            BadgeId = 6
                        },
                        new
                        {
                            UserId = "590201ab-1c71-4d80-8da8-78be2bd3df9a",
                            BadgeId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("taskarescu.Server.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("taskarescu.Server.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("taskarescu.Server.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("taskarescu.Server.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("taskarescu.Server.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("taskarescu.Server.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("taskarescu.Server.Models.Feedback", b =>
                {
                    b.HasOne("taskarescu.Server.Models.Difficulty", "Difficulty")
                        .WithMany("Feedback")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("taskarescu.Server.Models.TaskItem", "TaskItem")
                        .WithOne("Feedback")
                        .HasForeignKey("taskarescu.Server.Models.Feedback", "TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("taskarescu.Server.Models.AppUser", "User")
                        .WithMany("Feedback")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Difficulty");

                    b.Navigation("TaskItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("taskarescu.Server.Models.Project", b =>
                {
                    b.HasOne("taskarescu.Server.Models.AppUser", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("taskarescu.Server.Models.StudentProject", b =>
                {
                    b.HasOne("taskarescu.Server.Models.Project", "Project")
                        .WithMany("StudentProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("taskarescu.Server.Models.AppUser", "User")
                        .WithMany("StudentProjects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("taskarescu.Server.Models.TaskItem", b =>
                {
                    b.HasOne("taskarescu.Server.Models.Project", "Project")
                        .WithMany("TaskItems")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("taskarescu.Server.Models.Status", "Status")
                        .WithMany("TaskItems")
                        .HasForeignKey("StatusId");

                    b.HasOne("taskarescu.Server.Models.AppUser", "User")
                        .WithMany("TaskItems")
                        .HasForeignKey("UserId");

                    b.Navigation("Project");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("taskarescu.Server.Models.UserBadge", b =>
                {
                    b.HasOne("taskarescu.Server.Models.Badge", "Badge")
                        .WithMany("UserBadges")
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("taskarescu.Server.Models.AppUser", "User")
                        .WithMany("UserBadges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Badge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("taskarescu.Server.Models.AppUser", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("Projects");

                    b.Navigation("StudentProjects");

                    b.Navigation("TaskItems");

                    b.Navigation("UserBadges");
                });

            modelBuilder.Entity("taskarescu.Server.Models.Badge", b =>
                {
                    b.Navigation("UserBadges");
                });

            modelBuilder.Entity("taskarescu.Server.Models.Difficulty", b =>
                {
                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("taskarescu.Server.Models.Project", b =>
                {
                    b.Navigation("StudentProjects");

                    b.Navigation("TaskItems");
                });

            modelBuilder.Entity("taskarescu.Server.Models.Status", b =>
                {
                    b.Navigation("TaskItems");
                });

            modelBuilder.Entity("taskarescu.Server.Models.TaskItem", b =>
                {
                    b.Navigation("Feedback")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
